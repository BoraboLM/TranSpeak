// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// *********************************************************************
// For database provider visit @url https://console.neon.tech/app/projects - using cdd email(borabo)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum userRole {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  DISABLED
}

enum Language {
  ENGLISH
  PANGASINAN
  ILOCANO
}

model User {
  id                  String                @id @default(cuid())
  firstName           String?
  lastName            String?
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                userRole              @default(USER)
  status              Status                @default(ACTIVE)
  nationality         String?
  accounts            Account[]
  location            Location[]
  activityLogs        ActivityLogs[]
  Translation         Translation[]
  Phrasebook          Phrasebook[]
  SavedPhrasebook     SavedPhrasebook[]
  Dictionary          Dictionary[]
  DictionaryAnalytics DictionaryAnalytics[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Location {
  id        String @id @default(cuid())
  city      String
  location  String
  userId    String
  latitude  Float
  longitude Float

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLogs {
  id          Int      @id @default(autoincrement())
  userId      String
  name        String
  action      String
  information String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Translation {
  id         String @id @default(cuid())
  userId     String
  input      String
  output     String
  inputLang  String
  outputLang String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Phrasebook {
  id              String            @id @default(cuid())
  userId          String
  sourceLanguage  Language //English
  targetLanguage  Language //Pangasinan
  language        Language //Pangasinan
  title           String //Basic Numbers
  english_word    String //One
  target_word     String //Sakey 
  pronounciation  String //Sa-ke-y
  status          Status            @default(DISABLED)
  createdAt       DateTime          @default(now())
  savedPhrasebook SavedPhrasebook[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedPhrasebook {
  id           String @id @default(cuid())
  userId       String
  phrasebookId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  phrasebook Phrasebook @relation(fields: [phrasebookId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
}

model Dictionary {
  id                  String                @id @default(cuid())
  wordFil             String
  wordEng             String
  wordIlo             String
  wordPang            String
  pronFil             String
  pronEng             String
  pronIlo             String
  pronPang            String
  category_letter     String
  baseFil             String
  baseEng             String
  baseIlo             String
  basePang            String
  baseFilename        String
  userId              String
  status              Status                @default(DISABLED)
  DictionaryAnalytics DictionaryAnalytics[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DictionaryAnalytics {
  id        String   @id @default(cuid())
  userId    String
  wordId    String
  word      String
  language  String
  createdAt DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dictionary Dictionary @relation(fields: [wordId], references: [id], onDelete: Cascade)
}
