// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// *********************************************************************
// For database provider visit @url https://console.neon.tech/app/projects - using cdd email(borabo)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum userRole {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  DISABLED
}

enum Language {
  PANGASINAN
  ILOCANO
}

enum Difficulty {
  BASIC
  INTERMEDIATE
  ADVANCED
}

model User {
  id            String         @id @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          userRole       @default(USER)
  status        Status         @default(ACTIVE)
  nationality   String?
  accounts      Account[]
  location      Location?
  activityLogs  ActivityLogs[]
  Translation   Translation[]
  Learn         Learn[]
  Phrasebook    Phrasebook[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Location {
  id        String  @id @default(cuid())
  name      String?
  userId    String  @unique
  latitude  Float
  longitude Float

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLogs {
  id          Int      @id @default(autoincrement())
  userId      String
  name        String
  action      String
  information String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Translation {
  id         String @id @default(cuid())
  userId     String
  input      String
  output     String
  inputLang  String
  outputLang String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Learn {
  id          String   @id @default(cuid())
  userId      String
  language    Language
  title       String
  description String
  topic       String
  status      Status   @default(ACTIVE)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Phrasebook {
  id             String     @id @default(cuid())
  userId         String
  language       Language
  difficulty     Difficulty
  english_word   String
  target_word    String
  pronounciation String
  description    String
  status         Status     @default(ACTIVE)
  createdAt      DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
